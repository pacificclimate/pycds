"""
Plugins that extend table operations available to migrations in Alembic.

A plugin has 2 parts:
- an operation that is registered with Alembic; a subclass of MigrateOperation
- an implementation of the operation; a method that executes a SQL command
"""
import logging
from alembic.operations import (
    Operations,
    MigrateOperation,
)
from alembic.operations.ops import CreateTableOp


logger = logging.getLogger("alembic")


@Operations.register_operation("drop_table_if_exists")
class DropTableIfExistsOp(MigrateOperation):
    """
    Provide DROP TABLE IF EXISTS command.

    TODO: Inherit from Alembic builtin DropTableOp? See DropConstraintIfExistsOp
    """

    def __init__(self, name, schema=None, cascade=False):
        self.name = name
        self.schema = schema
        self.cascade = cascade

    @classmethod
    def drop_table_if_exists(cls, operations, name, **kw):
        """Issue a DROP TABLE IF EXISTS command."""
        op = cls(name, **kw)
        return operations.invoke(op)

    def reverse(self):
        """
        To support autogenerate.

        CAUTION: Conditional operations ("IF EXISTS") are not reliably
        reversible without memory of whether the table was actually dropped
        in the forward operation. This means a table may be incorrectly created
        in the autogenerated downgrade (I think). The user will have to add
        logic to the downgrade to solve this problem, if that is possible.
        """
        return CreateTableOp(self.name, schema=self.schema)


@Operations.implementation_for(DropTableIfExistsOp)
def drop_table_if_exists(operations, operation):
    # TODO: Refactor into a DDL extension.
    # TODO: Possibly refactor this into a command DropTableWithOptions to accommodate
    #   the possibility of omitting IF EXISTS and adding other options like CASCADE
    schema_prefix = f"{operation.schema}." if operation.schema is not None else ""
    command_parts = [
        "DROP TABLE",
        "IF EXISTS",
        f"{schema_prefix}{operation.name}",
        operation.cascade and "CASCADE",
    ]
    operations.execute(" ".join(filter(None, command_parts)))
