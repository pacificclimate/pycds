"""
Plugins to extend Alembic operations.

For information on the Alembic operation plugins, see
https://alembic.sqlalchemy.org/en/latest/api/operations.html#operation-plugins

TODO: Move contents of `pycds/replaceable_objects/materialized_views.py` here.
TODO: Move contents of `pycds/replaceable_objects/views.py` here.
TODO: Move contents of `pycds/replaceable_objects/stored_procedures.py` here.
"""

from alembic.operations import Operations, MigrateOperation
from alembic.operations.ops import CreateTableOp


# Table operations

@Operations.register_operation("drop_table_if_exists")
class DropTableIfExistsOp(MigrateOperation):
    """
    Provide DROP TABLE IF EXISTS command.

    TODO: Look into whether it is possible to override builtin Alembic
        operations. If so, replace this with an override for the existing
        `drop_table` op that adds an `if_exists` kw arg.
    """

    def __init__(self, name, schema=None):
        self.name = name
        self.schema = schema

    @classmethod
    def drop_table_if_exists(cls, operations, name, **kw):
        """Issue a DROP TABLE IF EXISTS command."""
        op = DropTableIfExistsOp(name, **kw)
        return operations.invoke(op)

    def reverse(self):
        """
        To support autogenerate.

        CAUTION: Conditional operations ("IF EXISTS") are not reliably
        reversible without memory of whether the table was actually dropped
        in the forward operation. This means a table may be incorrectly created
        in the autogenerated downgrade (I think). The user will have to add
        logic to the downgrade to solve this problem, if that is possible.
        """
        return CreateTableOp(self.name, schema=self.schema)


@Operations.implementation_for(DropTableIfExistsOp)
def drop_table_if_exists(operations, operation):
    schema_prefix = (
        f"{operation.schema}." if operation.schema is not None else ""
    )
    operations.execute(f"DROP TABLE IF EXISTS {schema_prefix}{operation.name}")
