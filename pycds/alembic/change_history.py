"""
Utility functions supporting change history migrations.
These are Python functions, not database functions.
"""
from typing import Iterable, Any

from alembic import op
import sqlalchemy as sa
from pycds import get_schema_name


schema_name = get_schema_name()


def qualified_name(name: str) -> str:
    return f"{schema_name}.{name}"


def pri_table_name(collection_name: str) -> str:
    return qualified_name(collection_name)


def hx_table_name(collection_name: str) -> str:
    return f"{pri_table_name(collection_name)}_hx"


def hx_id_name(collection_name: str):
    return f"{collection_name}_hx_id"


def sql_array(a: Iterable[Any]) -> str:
    return f"{{{", ".join(a)}}}"


# TODO: Do we need to pass ``op`` in to each procedure, or can we just import it globally
#  as we do here?


def add_history_cols_to_primary(collection_name: str):
    # TODO: It seems that we can add only one column at a time using
    #   op.add_column. Is it more resource-efficient to add them in a single command,
    #   as below?
    op.execute(
        f"ALTER TABLE {pri_table_name(collection_name)} "
        f"  ADD COLUMN mod_time timestamp without time zone NOT NULL DEFAULT NOW(), "
        f'  ADD COLUMN mod_user character varying(64) COLLATE pg_catalog."default" '
        f"      NOT NULL DEFAULT CURRENT_USER"
    )
    # op.add_column(
    #     collection_name,
    #     sa.Column(
    #         "mod_time",
    #         sa.TIMESTAMP,
    #         server_default=sa.func.now(),
    #         nullable=False,
    #     ),
    #     # TODO: Can we really add more than one column?
    #     sa.Column(
    #         "mod_user",
    #         sa.String(64),
    #         server_default="current_user",  # Or sa.func.current_user ?
    #         nullable=False,
    #     ),
    #     schema=schema_name,
    # )


def create_history_table(collection_name: str, pri_id_name: str):
    # Create the history table. We can't use Alembic create_table here because it doesn't
    # support the LIKE syntax we need.
    op.execute(
        f"CREATE TABLE {hx_table_name(collection_name)} ("
        f"  LIKE {pri_table_name(collection_name)} INCLUDING ALL, "
        f"  deleted boolean DEFAULT false, "
        f"  {hx_id_name(collection_name)} int "
        f"      PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY"
        f")"
    )


def populate_history_table(collection_name: str, pri_id_name: str):
    # Populate the history table with data from the primary table, in order of primary id.
    # That ordering guarantees that the newly generated history id's will be in the
    # same order, which is required for it to be a valid history table.
    op.execute(
        f"INSERT INTO {hx_table_name(collection_name)} "
        f"SELECT * "
        f"FROM {pri_table_name(collection_name)} "
        f"ORDER BY {pri_table_name(collection_name)}.{pri_id_name}"
    )


def create_history_triggers(
    collection_name: str, foreign_keys: list, prefix: str = "t100"
):
    # Enforce mod_time and mod_user values on primary table.
    op.execute(
        f"CREATE TRIGGER {prefix}_primary_control_hx_cols "
        f"    BEFORE INSERT OR DELETE OR UPDATE "
        f"    ON {pri_table_name(collection_name)} "
        f"    FOR EACH ROW "
        f"    EXECUTE FUNCTION {qualified_name('mdhx_primary_control_hx_cols')}()"
    )

    # Append history records to history table when primary updated.
    op.execute(
        f"CREATE TRIGGER {prefix}_primary_ops_to_hx "
        f"    AFTER INSERT OR DELETE OR UPDATE "  # TODO: Only INSERT?
        f"    ON {pri_table_name(collection_name)} "
        f"    FOR EACH ROW "
        f"    EXECUTE FUNCTION {qualified_name('hxtk_primary_ops_to_hx')}()"
    )

    # Add foreign key values to each record inserted into history table.
    fk_args = sql_array(sql_array(pair) for pair in foreign_keys)
    op.execute(
        f"CREATE TRIGGER {prefix}_add_foreign_hx_keys "
        f"    BEFORE INSERT " 
        f"    ON {hx_table_name(collection_name)} "
        f"    FOR EACH ROW "
        f"    EXECUTE FUNCTION {qualified_name('hxtk_add_foreign_hx_keys')}('{fk_args}')"
    )
